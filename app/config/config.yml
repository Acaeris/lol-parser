imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

parameters:
    locale: en

framework:
    #esi:             ~
    #translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id:  session.handler.native_file
        save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
    fragments:       ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Guzzle Configuration
guzzle:
    clients:
        riot_api:
            # Not actual url as the adapter needs to set region in domain anyway
            base_url: "https://api.riotgames/lol"
            options:
                headers:
                    Accept: "applicaiton/json"
            

# RabbitMQ Configuration
old_sound_rabbit_mq:
    connections:
        default:
            host:     'localhost'
            port:     5672
            user:     'guest'
            password: 'guest'
            vhost:    '/'
            lazy:     false
            connection_timeout: 3
            read_write_timeout: 3
            keepalive: false
            heartbeat: 0
    producers:
        version_updates:
            connection:       default
            exchange_options: { name: 'version_updates', type: direct }
        champion_updates:
            connection:       default
            exchange_options: { name: 'champion_updates', type: direct }
        item_updates:
            connection:       default
            exchange_options: { name: 'item_updates', type: direct }
        rune_updates:
            connection:       default
            exchange_options: { name: 'rune_updates', type: direct }
    consumers:
        version_updates:
            connection:       default
            exchange_options: { name: 'version_updates', type: direct }
            queue_options:    { name: 'version_updates' }
            callback:         LeagueOfData\Consumer\VersionUpdateConsumer
        champion_updates:
            connection:       default
            exchange_options: { name: 'champion_updates', type: direct }
            queue_options:    { name: 'champion_updates' }
            callback:         LeagueOfData\Consumer\ChampionUpdateConsumer
        item_updates:
            connection:       default
            exchange_options: { name: 'item_updates', type: direct }
            queue_options:    { name: 'item_updates' }
            callback:         LeagueOfData\Consumer\ItemUpdateConsumer
        rune_updates:
            connection:       default
            exchange_options: { name: 'rune_updates', type: direct }
            queue_options:    { name: 'rune_updates' }
            callback:         LeagueOfData\Consumer\RuneUpdateConsumer
